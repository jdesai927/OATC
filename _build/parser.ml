type token =
  | EOF
  | INT of (Range.t * int32)
  | X of (Range.t)
  | MINUS of (Range.t)
  | PLUS of (Range.t)
  | TIMES of (Range.t)
  | EQ of (Range.t)
  | NEQ of (Range.t)
  | LT of (Range.t)
  | LTE of (Range.t)
  | GT of (Range.t)
  | GTE of (Range.t)
  | LOGNOT of (Range.t)
  | NOT of (Range.t)
  | AND of (Range.t)
  | OR of (Range.t)
  | SHL of (Range.t)
  | SHR of (Range.t)
  | SAR of (Range.t)
  | LPAREN of (Range.t)
  | RPAREN of (Range.t)

open Parsing;;
# 2 "parser.mly"
open Ast;;
# 28 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* X *);
  259 (* MINUS *);
  260 (* PLUS *);
  261 (* TIMES *);
  262 (* EQ *);
  263 (* NEQ *);
  264 (* LT *);
  265 (* LTE *);
  266 (* GT *);
  267 (* GTE *);
  268 (* LOGNOT *);
  269 (* NOT *);
  270 (* AND *);
  271 (* OR *);
  272 (* SHL *);
  273 (* SHR *);
  274 (* SAR *);
  275 (* LPAREN *);
  276 (* RPAREN *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\004\000\004\000\006\000\006\000\
\006\000\007\000\007\000\007\000\007\000\007\000\005\000\005\000\
\005\000\005\000\008\000\008\000\008\000\009\000\009\000\010\000\
\010\000\010\000\010\000\011\000\011\000\012\000\012\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\001\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\001\000\002\000\
\002\000\002\000\001\000\003\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\030\000\031\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\027\000\029\000\026\000\024\000\025\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000"

let yysindex = "\255\255\
\009\255\000\000\000\000\000\000\009\255\009\255\009\255\009\255\
\000\000\020\000\012\255\018\255\013\255\252\254\005\255\002\255\
\031\255\000\000\000\000\000\000\000\000\000\000\000\000\019\255\
\000\000\009\255\009\255\009\255\009\255\009\255\009\255\009\255\
\009\255\009\255\009\255\009\255\009\255\009\255\009\255\000\000\
\018\255\252\254\002\255\002\255\002\255\005\255\005\255\013\255\
\013\255\013\255\013\255\031\255\031\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\139\000\112\000\110\000\182\000\052\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\125\000\067\000\082\000\097\000\184\000\194\000\127\000\
\142\000\157\000\172\000\019\000\037\000\000\000"

let yygindex = "\000\000\
\000\000\030\000\000\000\014\000\246\255\015\000\242\255\005\000\
\006\000\002\000\000\000\000\000"

let yytablesize = 470
let yytable = "\001\000\
\021\000\031\000\032\000\002\000\037\000\038\000\021\000\022\000\
\023\000\003\000\004\000\005\000\033\000\034\000\035\000\036\000\
\046\000\047\000\020\000\025\000\006\000\007\000\048\000\049\000\
\050\000\051\000\026\000\008\000\028\000\029\000\030\000\027\000\
\043\000\044\000\045\000\039\000\019\000\024\000\040\000\041\000\
\054\000\042\000\052\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\003\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\021\000\000\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\000\000\021\000\021\000\
\021\000\021\000\021\000\000\000\021\000\020\000\020\000\002\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\000\000\020\000\019\000\
\019\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\000\000\000\000\019\000\019\000\019\000\019\000\019\000\000\000\
\019\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\015\000\015\000\015\000\015\000\015\000\015\000\000\000\000\000\
\015\000\015\000\015\000\015\000\015\000\000\000\015\000\016\000\
\016\000\016\000\016\000\016\000\016\000\000\000\000\000\016\000\
\016\000\016\000\016\000\016\000\000\000\016\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\014\000\014\000\014\000\
\014\000\014\000\014\000\006\000\006\000\014\000\014\000\000\000\
\000\000\006\000\000\000\014\000\010\000\010\000\010\000\010\000\
\010\000\010\000\005\000\005\000\010\000\010\000\000\000\000\000\
\005\000\000\000\010\000\011\000\011\000\011\000\011\000\011\000\
\011\000\004\000\003\000\011\000\011\000\000\000\004\000\003\000\
\000\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\012\000\012\000\000\000\000\000\000\000\000\000\
\012\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\000\000\013\000\013\000\009\000\009\000\007\000\007\000\013\000\
\000\000\000\000\000\000\009\000\009\000\007\000\007\000\008\000\
\008\000\009\000\000\000\007\000\000\000\000\000\000\000\008\000\
\008\000\000\000\000\000\000\000\000\000\008\000"

let yycheck = "\001\000\
\000\000\006\001\007\001\000\000\003\001\004\001\005\000\006\000\
\007\000\001\001\002\001\003\001\008\001\009\001\010\001\011\001\
\031\000\032\000\000\000\000\000\012\001\013\001\033\000\034\000\
\035\000\036\000\015\001\019\001\016\001\017\001\018\001\014\001\
\028\000\029\000\030\000\005\001\000\000\008\000\020\001\026\000\
\039\000\027\000\037\000\038\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\000\000\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\003\001\004\001\020\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\006\001\007\001\008\001\
\009\001\010\001\011\001\014\001\015\001\014\001\015\001\255\255\
\255\255\020\001\255\255\020\001\006\001\007\001\008\001\009\001\
\010\001\011\001\014\001\015\001\014\001\015\001\255\255\255\255\
\020\001\255\255\020\001\006\001\007\001\008\001\009\001\010\001\
\011\001\015\001\015\001\014\001\015\001\255\255\020\001\020\001\
\255\255\020\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\006\001\007\001\006\001\007\001\020\001\
\255\255\255\255\255\255\014\001\015\001\014\001\015\001\006\001\
\007\001\020\001\255\255\020\001\255\255\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\020\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  X\000\
  MINUS\000\
  PLUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LTE\000\
  GT\000\
  GTE\000\
  LOGNOT\000\
  NOT\000\
  AND\000\
  OR\000\
  SHL\000\
  SHR\000\
  SAR\000\
  LPAREN\000\
  RPAREN\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 46 "parser.mly"
            ( _1 )
# 260 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 51 "parser.mly"
       ( _1 )
# 267 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 54 "parser.mly"
              ( Binop (Or, _1, _3) )
# 276 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 55 "parser.mly"
        ( _1 )
# 283 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 58 "parser.mly"
                 ( Binop (And, _1, _3) )
# 292 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 59 "parser.mly"
         ( _1 )
# 299 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 62 "parser.mly"
                 ( Binop (Eq, _1, _3) )
# 308 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 63 "parser.mly"
                  ( Binop (Neq, _1, _3) )
# 317 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 64 "parser.mly"
         ( _1 )
# 324 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 67 "parser.mly"
                  ( Binop (Lt, _1, _3) )
# 333 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 68 "parser.mly"
                   ( Binop (Lte, _1, _3) )
# 342 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 69 "parser.mly"
                  ( Binop (Gt, _1, _3) )
# 351 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 70 "parser.mly"
                   ( Binop (Gte, _1, _3) )
# 360 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 71 "parser.mly"
          ( _1 )
# 367 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 74 "parser.mly"
                    ( Binop (Shl, _1, _3) )
# 376 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 75 "parser.mly"
                    ( Binop (Shr, _1, _3) )
# 385 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 76 "parser.mly"
                    ( Binop (Sar, _1, _3) )
# 394 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 77 "parser.mly"
          ( _1 )
# 401 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 80 "parser.mly"
                    ( Binop (Plus, _1, _3) )
# 410 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 81 "parser.mly"
                     ( Binop (Minus, _1, _3) )
# 419 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 82 "parser.mly"
         ( _1 )
# 426 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 85 "parser.mly"
                  ( Binop (Times, _1, _3) )
# 435 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 86 "parser.mly"
       ( _1 )
# 442 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 89 "parser.mly"
              ( Unop (Lognot, _2) )
# 450 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 90 "parser.mly"
           ( Unop (Not, _2) )
# 458 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 91 "parser.mly"
             ( Unop (Neg, _2) )
# 466 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 92 "parser.mly"
          ( _1 )
# 473 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 95 "parser.mly"
                      ( _2 )
# 482 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 96 "parser.mly"
          ( _1 )
# 489 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * int32) in
    Obj.repr(
# 99 "parser.mly"
        ( Cint (snd _1) )
# 496 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 100 "parser.mly"
      ( Arg )
# 503 "parser.ml"
               : Ast.exp))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
